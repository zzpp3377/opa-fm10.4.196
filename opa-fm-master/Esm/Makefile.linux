# BEGIN_ICS_COPYRIGHT8 ****************************************
# 
# Copyright (c) 2015, Intel Corporation
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# END_ICS_COPYRIGHT8   ****************************************
# Makefile for OPENIB_HOST Project

# Include Make Control Settings
include $(TL_DIR)/$(PROJ_FILE_DIR)/Makesettings.project

# default target for project level makefile is stage
stage::
#prepfiles:: prepfiles_global
clobber:: clobber_global clobber_tools
ALL:: tools

BSP_SPECIFIC_DIRS=

#=============================================================================#
# Definitions:
#-----------------------------------------------------------------------------#

# Name of SubProjects
DS_SUBPROJECTS	= 
# name of executable or downloadable image
EXECUTABLE		= # IntelFM$(EXE_SUFFIX)
# list of sub directories to build
DIRS			= \
				$(TL_DIR)/Makerules \
				$(TL_DIR)/IbAccess
ifeq "$(IB_STACK)" "OPENIB"
DIRS			+= \
				$(TL_DIR)/oib_utils \
				$(TL_DIR)/opa_fe_utils
endif
DIRS			+= \
				$(TL_DIR)/Xml \
				$(TL_DIR)/Md5 \
				$(TL_DIR)/Topology \
				$(TL_DIR)/IbPrint \
				$(TL_DIR)/IbaTools/opaxmlextract \
				$(TL_DIR)/IbaTools/opaxmlfilter \
				$(TL_DIR)/IbaTools/FastFabric \
				$(PWD)/ib
				#$(TL_DIR)/Km \

# C files (.c)
CFILES			= \
				# Add more c files here
# C++ files (.cpp)
CCFILES			= \
				# Add more cpp files here
# lex files (.lex)
LFILES			= \
				# Add more lex files here
# archive library files (basename, $ARFILES will add MOD_LIB_DIR/prefix and suffix)
LIBFILES = 
# Windows Resource Files (.rc)
RSCFILES		=
# Windows IDL File (.idl)
IDLFILE			=
# Windows Linker Module Definitions (.def) file for dll's
DEFFILE			=
# targets to build during INCLUDES phase (add public includes here)
INCLUDE_TARGETS	= \
				# Add more h hpp files here
# Non-compiled files
MISC_FILES		= $(PWD)/README 
# all source files
SOURCES			= $(CFILES) $(CCFILES) $(LFILES) $(RSCFILES) $(IDLFILE)
INSTALL_SOURCES	= \
				$(TL_DIR)/CommonInstall/util_init.pl \
 				$(TL_DIR)/CommonInstall/util_basicio.pl \
 				$(TL_DIR)/CommonInstall/util_basicfile.pl \
 				$(TL_DIR)/CommonInstall/util_configfile.pl \
 				$(TL_DIR)/CommonInstall/util_startup.pl \
 				$(TL_DIR)/CommonInstall/util_driver.pl \
 				$(TL_DIR)/CommonInstall/util_components.pl \
 				$(TL_DIR)/CommonInstall/util_blacklist.pl \
 				$(TL_DIR)/CommonInstall/util_linuxconfig.pl \
 				$(TL_DIR)/CommonInstall/util_rpm.pl \
 				$(TL_DIR)/CommonInstall/util_build.pl \
 				$(TL_DIR)/CommonInstall/comp_qlgc_fm.pl \
 				$(TL_DIR)/CommonInstall/main_qlgc_fm.pl
COMP_SOURCES = $(TL_DIR)/CommonInstall/comp_qlgc_fm.pl

ifeq "$(BUILD_TARGET_OS_VENDOR_VERSION)" "ES72"
        PREREQ_SOURCE= $(TL_DIR)/CommonInstall/comp_fm_prereq_RHEL72.pl
endif
ifeq "$(BUILD_TARGET_OS_VENDOR_VERSION)" "ES73"
        PREREQ_SOURCE= $(TL_DIR)/CommonInstall/comp_fm_prereq_RHEL72.pl
endif
ifeq "$(BUILD_TARGET_OS_VENDOR_VERSION)" "ES121"
        PREREQ_SOURCE= $(TL_DIR)/CommonInstall/comp_fm_prereq_SLES121.pl
endif
ifeq "$(BUILD_TARGET_OS_VENDOR_VERSION)" "ES122"
        PREREQ_SOURCE= $(TL_DIR)/CommonInstall/comp_fm_prereq_SLES122.pl
endif

# Source files to include in DSP File
DSP_SOURCES		= $(INCLUDE_TARGETS) $(SOURCES) $(MISC_FILES) \
				  $(RSCFILES) $(DEFFILE) $(MAKEFILE) Makerules.project 
# all object files
OBJECTS			= $(CFILES:.c=$(OBJ_SUFFIX)) $(CCFILES:.cpp=$(OBJ_SUFFIX)) \
				  $(LFILES:.lex=$(OBJ_SUFFIX))
RSCOBJECTS		= $(RSCFILES:.rc=$(RES_SUFFIX))
# targets to build during LIBS phase
LIB_TARGETS_IMPLIB	=
LIB_TARGETS_ARLIB	= 
LIB_TARGETS_EXP		= $(LIB_TARGETS_IMPLIB:$(ARLIB_SUFFIX)=$(EXP_SUFFIX))
LIB_TARGETS_MISC	= 
# targets to build during CMDS phase
CMD_TARGETS_SHLIB	= 
CMD_TARGETS_EXE		= $(EXECUTABLE)
CMD_TARGETS_MISC	= INSTALL.pl comp.pl
# files to remove during clean phase
CLEAN_TARGETS_MISC	=  
CLEAN_TARGETS		= $(OBJECTS) $(RSCOBJECTS) $(IDL_TARGETS) $(CLEAN_TARGETS_MISC)
# other files to remove during clobber phase
CLOBBER_TARGETS_MISC=
# sub-directory to install to within bin
BIN_SUBDIR		= 
# sub-directory to install to within include
INCLUDE_SUBDIR		=

# Additional Settings
#CLOCALDEBUG	= User defined C debugging compilation flags [Empty]
#CCLOCALDEBUG	= User defined C++ debugging compilation flags [Empty]
#CLOCAL	= User defined C flags for compiling [Empty]
#CCLOCAL	= User defined C++ flags for compiling [Empty]
#BSCLOCAL	= User flags for Browse File Builder [Empty]
#DEPENDLOCAL	= user defined makedepend flags [Empty]
#LINTLOCAL	= User defined lint flags [Empty]
#LOCAL_INCLUDE_DIRS	= User include directories to search for C/C++ headers [Empty]
#LDLOCAL	= User defined C flags for linking [Empty]
#IMPLIBLOCAL	= User flags for Object Lirary Manager [Empty]
#MIDLLOCAL	= User flags for IDL compiler [Empty]
#RSCLOCAL	= User flags for resource compiler [Empty]
#LOCALDEPLIBS	= User libraries to include in dependencies [Empty]
#LOCALLIBS		= User libraries to use when linking [Empty]
#				(in addition to LOCALDEPLIBS)
#LOCAL_LIB_DIRS	= User library directories for libpaths [Empty]

LOCALDEPLIBS = 

# Include Make Rules definitions and rules
include $(TL_DIR)/$(PROJ_FILE_DIR)/Makerules.project

#=============================================================================#
# Overrides:
#-----------------------------------------------------------------------------#
#CCOPT			=	# C++ optimization flags, default lets build config decide
#COPT			=	# C optimization flags, default lets build config decide
#SUBSYSTEM = Subsystem to build for (none, console or windows) [none]
#					 (Windows Only)
#USEMFC	= How Windows MFC should be used (none, static, shared, no_mfc) [none]
#				(Windows Only)
#=============================================================================#

#=============================================================================#
# Rules:
#-----------------------------------------------------------------------------#
# process Sub-directories
include $(TL_DIR)/Makerules/Maketargets.toplevel

# build cmds and libs
include $(TL_DIR)/Makerules/Maketargets.build

# to avoid conflicts with the INSTALL pseudo target in make system build as .pl
# and rename during STAGE
INSTALL.pl: $(INSTALL_SOURCES)
	cat $(INSTALL_SOURCES) > INSTALL.pl
	chmod +x INSTALL.pl

comp.pl: $(COMP_SOURCES)
	 cat $(PREREQ_SOURCE) $(COMP_SOURCES) > comp.pl
	 chmod +x comp.pl

# install for includes, libs and cmds phases
include $(TL_DIR)/Makerules/Maketargets.install

# install for stage phase
#include $(TL_DIR)/Makerules/Maketargets.stage
STAGE::
	mkdir -p $(PROJ_STAGE_DIR)
ifeq "$(RELEASE_TAG)" ""
	echo $(MODULEVERSION) | tr '_-' '..' > $(PROJ_STAGE_DIR)/Version
else
	echo $(RELEASE_TAG) | tr '_-' '..' > $(PROJ_STAGE_DIR)/Version
endif
	echo $(BUILD_TARGET) > $(PROJ_STAGE_DIR)/arch
	echo $(BUILD_TARGET_OS_VENDOR) > $(PROJ_STAGE_DIR)/distro
	echo $(BUILD_TARGET_OS_VENDOR_VERSION) > $(PROJ_STAGE_DIR)/distro_version
	echo $(BUILD_TARGET_OS_ID) > $(PROJ_STAGE_DIR)/os_id
	$(VS)$(STAGE_INSTALL) $(STAGE_INSTALL_DIR_OPT) $(PROJ_STAGE_DIR) INSTALL.pl
	cd $(PROJ_STAGE_DIR) ; mv INSTALL.pl INSTALL
	$(VS)$(STAGE_INSTALL) $(STAGE_INSTALL_DIR_OPT) $(PROJ_STAGE_DIR) comp.pl
	$(VS)$(STAGE_INSTALL) $(STAGE_INSTALL_DIR_OPT) $(PROJ_STAGE_DIR) README

# put version number into a file to facilitate rpm construction
# presently only INSTALL allows dynamic version patch
prepfiles:: check_env
ifeq "$(RELEASE_TAG)" ""
	$(CONVERT_RELEASETAG) $(MODULEVERSION) > $(PROJ_STAGE_DIR)/Version
else
	$(CONVERT_RELEASETAG) $(RELEASE_TAG) > $(PROJ_STAGE_DIR)/Version
endif
	cd $(PROJ_STAGE_DIR) && find . -print| $(PREP)
	dir=`dirname $(GLOBAL_BIN_DIR)`; \
	mkdir $$dir/stage.rpm; \
	cp -r -L $(GLOBAL_BIN_DIR)/* $$dir/stage.rpm/ ; \
	cd $$dir/stage.rpm && find . -print| $(PREP);
	cd $(PROJ_STAGE_DIR) && $(PATCH_VERSION) -m % $(RELEASE_TAG) INSTALL
	cd $(PROJ_STAGE_DIR) && $(PATCH_BRAND) -m % "$(BUILD_BRAND)" INSTALL

# package builds standard package
package:
	mkdir -p $(RELEASE_DIR)
	rm -f packaged_files dist_files
	cd $(STAGE_DIR) ; \
	dir=`echo IntelOPA-FM.*`; \
	ver=`expr IntelOPA-FM.* : 'IntelOPA-FM.\(.*\)$$'`; \
	rm -rf $(RELEASE_DIR)/IntelOPA-FM.$$ver; \
	mkdir -p $(RELEASE_DIR)/IntelOPA-FM.$$ver ; \
	cp -r $$dir/arch $$dir/distro $$dir/distro_version $$dir/os_id $$dir/README $(RELEASE_DIR)/IntelOPA-FM.$$ver 2>/dev/null; \
	cp -r $$dir/INSTALL $$dir/comp.pl $$dir/Version $(RELEASE_DIR)/IntelOPA-FM.$$ver ; \
	echo "$(RELEASE_DIR)/IntelOPA-FM.$$ver.tgz" >> $(TL_DIR)/packaged_files; \
	echo "$(RELEASE_DIR)/IntelOPA-FM.$$ver.tgz" >> $(TL_DIR)/dist_files; \

.PHONY:  package

vars_include: vars_include_global

final_package:
	cd $(TL_DIR)/rpmbuild; \
	dir=`head -n1 BUILD/opa-fm-$${MKRPM_REL}/packaged_files |xargs dirname`; \
	filename=`head -n1 BUILD/opa-fm-$${MKRPM_REL}/packaged_files |xargs basename`; \
	subdir=$${filename%.tgz}; \
	srpmdir=$$dir/$$subdir/SRPMS; \
	arch=`echo $(BUILD_TARGET) | tr '[A-Z]' '[a-z]'`; \
	rpmdir=$$dir/$$subdir/RPMS/$$arch;\
	mkdir -p $$srpmdir; \
	mkdir -p $$rpmdir; \
	cp SRPMS/opa-fm-$${MKRPM_REL}-$${MKRPM_VER}.src.rpm $$srpmdir/ ; \
	cp RPMS/$$arch/opa-fm-$${MKRPM_REL}-$${MKRPM_VER}.$$arch.rpm $$rpmdir/; \
	cp RPMS/$$arch/opa-fm-debuginfo-$${MKRPM_REL}-$${MKRPM_VER}.$$arch.rpm $$rpmdir/; \
	if [ "$(BUILD_TARGET_OS_VENDOR)" = "SuSE" ]; then \
		cp RPMS/$$arch/opa-fm-debugsource-$${MKRPM_REL}-$${MKRPM_VER}.$$arch.rpm $$rpmdir/; \
	fi; \
	cd $$dir; \
	echo "Packaging $$dir/$$filename ..."; \
	tar cvfz $$filename $$subdir
	cp $(TL_DIR)/rpmbuild/BUILD/opa-fm-$${MKRPM_REL}/packaged_files .
	cp $(TL_DIR)/rpmbuild/BUILD/opa-fm-$${MKRPM_REL}/dist_files .

# Unit test execution
#include $(TL_DIR)/Makerules/Maketargets.runtest

tools:
	mkdir -p $(COMN_LIB_DIRS) $(GLOBAL_SHLIB_DIR)
	cd $(TL_DIR)/MakeTools && $(MAKE) $(MFLAGS)
clobber_tools:
	cd $(TL_DIR)/MakeTools && $(MAKE) $(MFLAGS) clobber
CLOBBER::
	rm -f packaged_files dist_files

#=============================================================================#

#=============================================================================#
# DO NOT DELETE THIS LINE -- make depend depends on it.
#=============================================================================#
